@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using System
@using Dynamicweb.Rendering
@using System.Web
@using System.Linq

@* see which need to be replaced by Email Helpers *@

@helper RenderHeading(string text)
{
    <tr>
        <td colspan="2">
            <h2>@text</h2>
        </td>
    </tr>
}

@helper RenderKeyValueRow(string key, string value, string cellStyle)
{
    <tr>
        <td style="@cellStyle">@key</td>
        <td style="@cellStyle">@value</td>
    </tr>
}

@helper RenderKeyValueRowLog(string key, string value, string cellStyle)
{
    <tr>
        <td style="@cellStyle">@key</td>
        <td style="@cellStyle">
            <div>@value</div>
        </td>
    </tr>
}

@helper RenderKeyValueHeading(string keyName, string valueName, string headerStyle)
{
    <tr>
        <th style="@headerStyle">@keyName</th>
        <th style="@headerStyle">@valueName</th>
    </tr>
}

@helper RenderServerVariables(string[] variablesToIgnore, string cellStyle)
{
    <tr>
        <td colspan="2">
            <h2>Server variables <span style="font-size:12px; color: gray;">(excluding @( string.Join(", ", variablesToIgnore.ToArray())))</span></h2>
        </td>
    </tr>
    var request = HttpContext.Current.Request;
    foreach (var key in request.ServerVariables.AllKeys.Where(x => !variablesToIgnore.Contains(x)))
    {
        var value = request.ServerVariables[key];
        @RenderKeyValueRow(key, value, cellStyle)
    }
}

@helper RenderTemplateValues(string cellStyle)
{
    var message = GetString("Ecom:DataIntegration.ScheduledActivity.ErrorMessage") ?? "";
    if (message.Length < 50) // Probably not an error. Just display message in its own cell.
    {
        <text>@RenderKeyValueRow("Message", message, cellStyle)</text>
    }
    else
    {
        // More error details; span two columns
        <tr>
            <td style="@cellStyle" colspan="2">
                <div style="margin-bottom: 4px;">Message</div>@message
            </td>
        </tr>
    }
    var fields = new[] { "Ecom:DataIntegration.ScheduledActivity.MessageType", "Ecom:DataIntegration.ScheduledTaskAddInName", "Ecom:DataIntegration.ScheduledTaskName" };
    foreach (var field in fields)
    {
        <text>
            @RenderKeyValueRow(GetLastPart(field), GetString(field), cellStyle)
        </text>
    }
}

@helper RenderTemplateTagsValues(string tableStyle, string headerStyle, string cellStyle)
{
    var tags = TemplateTags();
    tags = tags.Replace("<table", "<h2>Full template tags</h2><table style=\"" + tableStyle + "\"");
    tags = tags.Replace("width: 640px; ", "");
    tags = tags.Replace("<th", "<th style=\"" + headerStyle + "\"");
    tags = tags.Replace("<td", "<td style=\"" + cellStyle + "\"");
    @tags
}

@functions {

    public string GetLastPart(string input)
    {
        if (!input.Contains("."))
        {
            return input;
        }
        var elements = input.Split('.');
        return elements[elements.Length - 1];
    }

    public string GetTableStyle()
    {
        return "color: #333; font-family: Helvetica, Arial, sans-serif; border-collapse: collapse; border-spacing: 0;";
    }

    public string GetHeaderStyle()
    {
        return "padding-left: 5px; padding-right: 5px; text-align: left; border: 1px solid #CCC; height: 30px; background: #F3F3F3; font-weight: bold;";
    }

    public string GetCellStyle()
    {
        return "padding-left: 5px; padding-right: 5px; border: 1px solid #CCC; height: 30px; background: #FAFAFA;";
    }

} 